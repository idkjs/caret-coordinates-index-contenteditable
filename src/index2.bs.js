// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

console.log("getSelectionTest", typeof (function (prim) {
        return window.getSelection();
      }) !== "undefined");

function unwrapElement(v) {
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "Passed none to unwrap",
        Error: new Error()
      };
}

function getClassList(item) {
  return item.classList;
}

function toggleClasses(newClass, oldClass, classList) {
  classList.add(newClass);
  classList.remove(oldClass);
  
}

function isSupported(param) {
  return typeof (function (prim) {
            return prim.getSelection();
          }) !== "undefined";
}

function getSelection(param) {
  return window.getSelection();
}

function getRangeCount(selection) {
  return selection.rangeCount;
}

function rangeZero(selection) {
  return selection.getRangeAt(0);
}

function getCaretCoordinates(param) {
  console.log("isSupported()", typeof (function (prim) {
          return prim.getSelection();
        }) !== "undefined");
  if (typeof (function (prim) {
        return prim.getSelection();
      }) === "undefined") {
    return [
            0,
            0
          ];
  }
  var selection = window.getSelection();
  var rangeCount = selection.rangeCount;
  console.log("getCaretCoordinates selection:", selection);
  console.log("getCaretCoordinates rangeCount", rangeCount);
  if (rangeCount === 0) {
    return [
            0,
            0
          ];
  }
  var range = selection.getRangeAt(0).cloneRange();
  console.log("rangeZero(selection)", selection.getRangeAt(0));
  console.log("range", range);
  range.collapse();
  var rect = range.getClientRects();
  console.log("rect", rect);
  if (rect.length === 0) {
    return [
            0,
            0
          ];
  }
  var rect$1 = rect[0];
  var left = rect$1.left;
  var top = rect$1.top;
  return [
          left,
          top
        ];
}

function getLeft(param) {
  return getCaretCoordinates(undefined)[0];
}

function getTop(param) {
  return getCaretCoordinates(undefined)[1];
}

function leftStr(param) {
  return (getCaretCoordinates(undefined)[0] - 36).toString();
}

function topStr(param) {
  return (getCaretCoordinates(undefined)[1] - 36).toString();
}

function toggle(toggleAction) {
  if (toggleAction.TAG === /* Expand */0) {
    var item = toggleAction._0;
    item.setAttribute("aria-hidden", "false");
    var inlineBlock = "display: inline-block; left:" + (toggleAction._1 + ("px; top:" + (toggleAction._2 + "px")));
    item.setAttribute("style", inlineBlock);
    return ;
  }
  var item$1 = toggleAction._0;
  item$1.setAttribute("aria-hidden", "true");
  item$1.setAttribute("style", "display: none;");
  
}

var tooltip = unwrapElement(Caml_option.nullable_to_opt(document.getElementById("tooltip")));

var contenteditable = unwrapElement(Caml_option.nullable_to_opt(document.getElementById("contenteditable")));

function getSectionElement(withId, section) {
  return unwrapElement(Caml_option.nullable_to_opt(section.querySelector(withId)));
}

function getCaretIndex(element) {
  console.log("getCaretIndex called");
  if (typeof (function (prim) {
        return prim.getSelection();
      }) === "undefined") {
    return 0;
  }
  var selection = window.getSelection();
  var rangeCount = selection.rangeCount;
  if (rangeCount === 0) {
    return 0;
  }
  var range = selection.getRangeAt(0);
  console.log("original range", range);
  range.collapse();
  var preCaretRange = range.cloneRange();
  console.log("preCaretRange: ", preCaretRange);
  preCaretRange.selectNodeContents(element);
  console.log("preCaretRange selectNodeContents: ", undefined);
  preCaretRange.selectNodeContents(element);
  preCaretRange.setEnd(range.endContainer, range.endOffset);
  var position = preCaretRange.toString().length;
  console.log("preCaretRange position: ", position);
  return position;
}

function handleEditableClick($$event) {
  var element = $$event.target;
  var sectionContains = element.contains(element);
  var left = (getCaretCoordinates(undefined)[0] - 32).toString();
  var top = (getCaretCoordinates(undefined)[1] - 36).toString();
  if (sectionContains) {
    toggle({
          TAG: /* Expand */0,
          _0: element,
          _1: left,
          _2: top
        });
  } else {
    toggle({
          TAG: /* Collapse */1,
          _0: element
        });
  }
  if (sectionContains) {
    tooltip.setAttribute("aria-hidden", "false");
    tooltip.setAttribute("style", "display: inline-block; left:" + (leftStr(undefined) + ("px; top:" + (topStr(undefined) + "px"))));
  } else {
    tooltip.setAttribute("aria-hidden", "true");
    tooltip.setAttribute("style", "display: none;");
  }
  
}

function composeItem($$event) {
  tooltip.setAttribute("aria-hidden", "false");
  tooltip.setAttribute("style", "display: inline-block; left:" + (leftStr(undefined) + ("px; top:" + (topStr(undefined) + "px"))));
  contenteditable.addEventListener("click", handleEditableClick);
  return {
          tooltip: tooltip,
          left: getCaretCoordinates(undefined)[0],
          top: getCaretCoordinates(undefined)[1],
          el: $$event
        };
}

function getTooltip(param) {
  var el = document.getElementById("tooltip");
  if (!(el == null)) {
    return el;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "getFormElement failed",
        Error: new Error()
      };
}

function selectTooltip(param) {
  var tooltip = getTooltip(undefined);
  tooltip.setAttribute("aria-hidden", "false");
  tooltip.setAttribute("style", "display: inline-block; left:" + (leftStr(undefined) + ("px; top:" + (topStr(undefined) + "px"))));
  
}

function toggleTooltip($$event, contenteditable) {
  console.log("ToggleTooltip called");
  var eventTarget = $$event.target;
  var elementContains = contenteditable.contains(eventTarget);
  var tooltip = Belt_Option.getExn(Caml_option.nullable_to_opt(document.getElementById("tooltip")));
  console.log("ToggleTooltip elementContains:", elementContains);
  if (elementContains) {
    tooltip.setAttribute("aria-hidden", "false");
    tooltip.setAttribute("style", "display: inline-block; left:" + (leftStr(undefined) + ("px; top:" + (topStr(undefined) + "px"))));
  } else {
    tooltip.setAttribute("aria-hidden", "true");
    tooltip.setAttribute("style", "display: none;");
  }
  
}

function handleUpdateIndex(domElement, $$event, fn) {
  var targetElement = $$event.target;
  if (!domElement.contains(targetElement)) {
    return Curry._1(fn, $$event);
  }
  
}

function setInnerText(text, elementId) {
  var __x = document.getElementById(elementId);
  return Belt_Option.map((__x == null) ? undefined : Caml_option.some(__x), (function (__x) {
                __x.innerText = text;
                
              }));
}

function updateIndex($$event, element) {
  console.log("updateIndex called");
  var eventTarget = $$event.target;
  var elementContains = element.contains(eventTarget);
  var caretIndex = String(getCaretIndex(element));
  if (elementContains) {
    setInnerText(caretIndex, "caretIndex");
  } else {
    setInnerText(caretIndex, "\xe2\x80\x93");
  }
  
}

function updateIndex2($$event, element) {
  console.log("updateIndex called");
  var textPosition = Belt_Option.getExn(Caml_option.nullable_to_opt(document.getElementById("caretIndex")));
  var $$event$1 = $$event.target;
  console.log("updateIndex event", $$event$1);
  var caretIndex = String(getCaretIndex(element));
  console.log("updateIndex caretIndex", caretIndex);
  var targetElement = $$event$1.target;
  if (element.contains(targetElement)) {
    textPosition.innerText = caretIndex;
  } else {
    textPosition.innerText = "\xe2\x80\x93";
  }
  
}

function setChangeListener(listener) {
  document.addEventListener("click", listener);
  document.addEventListener("keyup", listener);
  
}

var editable = document.getElementById("contenteditable");

var editableExn = Belt_Option.getExn(Caml_option.nullable_to_opt(document.getElementById("contenteditable")));

if (editable == null) {
  console.log("editable not found");
} else {
  document.addEventListener("click", (function ($$event) {
          return toggleTooltip($$event, editable);
        }));
  document.addEventListener("click", (function ($$event) {
          return updateIndex($$event, editable);
        }));
  document.addEventListener("keyup", (function ($$event) {
          return toggleTooltip($$event, editable);
        }));
  document.addEventListener("keyup", (function ($$event) {
          return updateIndex($$event, editable);
        }));
  setChangeListener(function ($$event) {
        console.log($$event);
        
      });
}

var editable$1 = (editable == null) ? undefined : Caml_option.some(editable);

exports.unwrapElement = unwrapElement;
exports.getClassList = getClassList;
exports.toggleClasses = toggleClasses;
exports.isSupported = isSupported;
exports.getSelection = getSelection;
exports.getRangeCount = getRangeCount;
exports.rangeZero = rangeZero;
exports.getCaretCoordinates = getCaretCoordinates;
exports.getLeft = getLeft;
exports.getTop = getTop;
exports.leftStr = leftStr;
exports.topStr = topStr;
exports.toggle = toggle;
exports.tooltip = tooltip;
exports.contenteditable = contenteditable;
exports.getSectionElement = getSectionElement;
exports.getCaretIndex = getCaretIndex;
exports.handleEditableClick = handleEditableClick;
exports.composeItem = composeItem;
exports.getTooltip = getTooltip;
exports.selectTooltip = selectTooltip;
exports.toggleTooltip = toggleTooltip;
exports.handleUpdateIndex = handleUpdateIndex;
exports.setInnerText = setInnerText;
exports.updateIndex = updateIndex;
exports.updateIndex2 = updateIndex2;
exports.setChangeListener = setChangeListener;
exports.editable = editable$1;
exports.editableExn = editableExn;
/*  Not a pure module */
