// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function isSupported(param) {
  return typeof (function (prim) {
            return prim.getSelection();
          }) !== "undefined";
}

function getSelection(param) {
  return window.getSelection();
}

function getRangeCount(selection) {
  return selection.rangeCount;
}

function rangeZero(selection) {
  return selection.getRangeAt(0);
}

function getCaretCoordinates(param) {
  if (typeof (function (prim) {
        return prim.getSelection();
      }) === "undefined") {
    return [
            0,
            0
          ];
  }
  var selection = window.getSelection();
  var rangeCount = selection.rangeCount;
  if (rangeCount === 0) {
    return [
            0,
            0
          ];
  }
  var range = selection.getRangeAt(0).cloneRange();
  range.collapse();
  var rect = range.getClientRects();
  console.log("rect", rect);
  if (rect.length === 0) {
    return [
            0,
            0
          ];
  }
  var rect$1 = rect[0];
  var left = rect$1.left;
  var top = rect$1.top;
  return [
          left,
          top
        ];
}

function getCaretIndex(element) {
  console.log("getCaretIndex called");
  if (typeof (function (prim) {
        return prim.getSelection();
      }) === "undefined") {
    return 0;
  }
  var selection = window.getSelection();
  var rangeCount = selection.rangeCount;
  if (rangeCount === 0) {
    return 0;
  }
  var range = selection.getRangeAt(0);
  range.collapse();
  var preCaretRange = range.cloneRange();
  preCaretRange.selectNodeContents(element);
  console.log("selectNodeContents: Im not understanding why we do this. It always comes back: ", undefined);
  preCaretRange.selectNodeContents(element);
  preCaretRange.setEnd(range.endContainer, range.endOffset);
  return preCaretRange.toString().length;
}

function getLeft(param) {
  return getCaretCoordinates(undefined)[0];
}

function getTop(param) {
  return getCaretCoordinates(undefined)[1];
}

function leftStr(param) {
  return (getCaretCoordinates(undefined)[0] - 36).toString();
}

function topStr(param) {
  return (getCaretCoordinates(undefined)[1] - 36).toString();
}

function getTooltip(param) {
  var el = document.getElementById("tooltip");
  if (!(el == null)) {
    return el;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "getFormElement failed",
        Error: new Error()
      };
}

function selectTooltip(param) {
  var tooltip = getTooltip(undefined);
  tooltip.setAttribute("aria-hidden", "false");
  tooltip.setAttribute("style", "display: inline-block; left: " + (leftStr(undefined) + ("px; top: " + (topStr(undefined) + "px"))));
  
}

function elementContains($$event, element) {
  var eventTarget = $$event.target;
  return element.contains(eventTarget);
}

function toggleTooltip($$event, contenteditable) {
  if (elementContains($$event, contenteditable)) {
    var __x = document.getElementById("tooltip");
    Belt_Option.map((__x == null) ? undefined : Caml_option.some(__x), (function (param) {
            param.setAttribute("aria-hidden", "false");
            
          }));
    var __x$1 = document.getElementById("tooltip");
    var partial_arg = "display: inline-block; left: " + (leftStr(undefined) + ("px; top: " + (topStr(undefined) + "px")));
    Belt_Option.map((__x$1 == null) ? undefined : Caml_option.some(__x$1), (function (param) {
            param.setAttribute("style", partial_arg);
            
          }));
  } else {
    var __x$2 = document.getElementById("tooltip");
    Belt_Option.map((__x$2 == null) ? undefined : Caml_option.some(__x$2), (function (param) {
            param.setAttribute("aria-hidden", "true");
            
          }));
    var __x$3 = document.getElementById("tooltip");
    Belt_Option.map((__x$3 == null) ? undefined : Caml_option.some(__x$3), (function (param) {
            param.setAttribute("style", "display: none;");
            
          }));
  }
  
}

function setInnerText(text, elementId) {
  var __x = document.getElementById(elementId);
  return Belt_Option.map((__x == null) ? undefined : Caml_option.some(__x), (function (__x) {
                __x.innerText = text;
                
              }));
}

function updateIndex($$event, element) {
  console.log("updateIndex called");
  var caretIndex = String(getCaretIndex(element));
  if (elementContains($$event, element)) {
    setInnerText(caretIndex, "caretIndex");
  } else {
    setInnerText(caretIndex, "\xe2\x80\x93");
  }
  
}

var editable = document.getElementById("contenteditable");

if (editable == null) {
  console.log("editable not found");
} else {
  document.addEventListener("click", (function ($$event) {
          return toggleTooltip($$event, editable);
        }));
  document.addEventListener("click", (function ($$event) {
          return updateIndex($$event, editable);
        }));
  document.addEventListener("keyup", (function ($$event) {
          return toggleTooltip($$event, editable);
        }));
  document.addEventListener("keyup", (function ($$event) {
          return updateIndex($$event, editable);
        }));
}

var editable$1 = (editable == null) ? undefined : Caml_option.some(editable);

exports.isSupported = isSupported;
exports.getSelection = getSelection;
exports.getRangeCount = getRangeCount;
exports.rangeZero = rangeZero;
exports.getCaretCoordinates = getCaretCoordinates;
exports.getCaretIndex = getCaretIndex;
exports.getLeft = getLeft;
exports.getTop = getTop;
exports.leftStr = leftStr;
exports.topStr = topStr;
exports.getTooltip = getTooltip;
exports.selectTooltip = selectTooltip;
exports.elementContains = elementContains;
exports.toggleTooltip = toggleTooltip;
exports.setInnerText = setInnerText;
exports.updateIndex = updateIndex;
exports.editable = editable$1;
/* editable Not a pure module */
